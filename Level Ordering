#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node{
    int key;
    struct node *left, *right;
    
};
void printCurrentLevel(struct node* root, int level);
int height(struct node* node);
struct node* newNode(int key);
struct node* newNode(int item)
{
    struct node* temp=(struct node*)malloc(sizeof(struct node));
    temp->key=item;
    temp->left=temp->right=NULL;
    return temp;
}
struct node* insert(struct node* node,int key)
{
    if (node==NULL)
        return newNode(key);
    if (key%4==0)
        node->left= insert(node->left,key);
    else
        node->right= insert(node->right,key);
    return node;
}
void printCurrentLevel(struct node* root, int level)
{
    if (root == NULL)
        return;
    if (level == 1)
        printf("%d ", root->key);
    else if (level > 1) {
        printCurrentLevel(root->left, level - 1);
        printCurrentLevel(root->right, level - 1);
    }
}
void LevelOrder(struct node* root)
{
    int h=height(root);
    int i;
    for(i=1;i<=h;i++)
        printCurrentLevel(root,i);
}
int height(struct node* node)
{
    if (node == NULL)
        return 0;
    else
    {
        int lheight = height(node->left);
        int rheight = height(node->right);
        if (lheight > rheight)
            return (lheight + 1);
        else
            return (rheight + 1);
    }
}

int main()
{
    int n,test,arr[100],i,j;
    scanf("%d",&test);
    while(test>0)
    {
        struct node* root=NULL;
        scanf("%d",&n);
        for(i=0;i<n;i++)
        {
            scanf("%d",&arr[i]);
           
        }
        root=insert(root,arr[0]);
        for(j=1;j<n;j++)
            insert(root,arr[j]);
        test--;
        LevelOrder(root);
        printf("\n");
    }
    return 0;
}
